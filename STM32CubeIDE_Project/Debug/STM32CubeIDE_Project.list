
STM32CubeIDE_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  2000005c  08003d50  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001000  08003d50  00021000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ba2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003006  00000000  00000000  00035c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f66  00000000  00000000  0003a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024373  00000000  00000000  0003afe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001492c  00000000  00000000  0005f359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9347  00000000  00000000  00073c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005740  00000000  00000000  0015cfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  0016270c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003cb4 	.word	0x08003cb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003cb4 	.word	0x08003cb4

08000220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <__NVIC_GetPriorityGrouping+0x18>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	0a1b      	lsrs	r3, r3, #8
 800022a:	f003 0307 	and.w	r3, r3, #7
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	2b00      	cmp	r3, #0
 800024c:	db0b      	blt.n	8000266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 021f 	and.w	r2, r3, #31
 8000254:	4907      	ldr	r1, [pc, #28]	; (8000274 <__NVIC_EnableIRQ+0x38>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	095b      	lsrs	r3, r3, #5
 800025c:	2001      	movs	r0, #1
 800025e:	fa00 f202 	lsl.w	r2, r0, r2
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000e100 	.word	0xe000e100

08000278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	db0a      	blt.n	80002a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	490c      	ldr	r1, [pc, #48]	; (80002c4 <__NVIC_SetPriority+0x4c>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a0:	e00a      	b.n	80002b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4908      	ldr	r1, [pc, #32]	; (80002c8 <__NVIC_SetPriority+0x50>)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	3b04      	subs	r3, #4
 80002b0:	0112      	lsls	r2, r2, #4
 80002b2:	b2d2      	uxtb	r2, r2
 80002b4:	440b      	add	r3, r1
 80002b6:	761a      	strb	r2, [r3, #24]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b089      	sub	sp, #36	; 0x24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f003 0307 	and.w	r3, r3, #7
 80002de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	f1c3 0307 	rsb	r3, r3, #7
 80002e6:	2b04      	cmp	r3, #4
 80002e8:	bf28      	it	cs
 80002ea:	2304      	movcs	r3, #4
 80002ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	3304      	adds	r3, #4
 80002f2:	2b06      	cmp	r3, #6
 80002f4:	d902      	bls.n	80002fc <NVIC_EncodePriority+0x30>
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	3b03      	subs	r3, #3
 80002fa:	e000      	b.n	80002fe <NVIC_EncodePriority+0x32>
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000300:	f04f 32ff 	mov.w	r2, #4294967295
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	43da      	mvns	r2, r3
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	401a      	ands	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000314:	f04f 31ff 	mov.w	r1, #4294967295
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	43d9      	mvns	r1, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000324:	4313      	orrs	r3, r2
         );
}
 8000326:	4618      	mov	r0, r3
 8000328:	3724      	adds	r7, #36	; 0x24
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
	...

08000334 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LL_RCC_HSI_Enable+0x1c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <LL_RCC_HSI_Enable+0x1c>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800

08000354 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <LL_RCC_HSI_IsReady+0x20>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0302 	and.w	r3, r3, #2
 8000360:	2b02      	cmp	r3, #2
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	40023800 	.word	0x40023800

08000378 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	4904      	ldr	r1, [pc, #16]	; (80003a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800038e:	4313      	orrs	r3, r2
 8000390:	600b      	str	r3, [r1, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40023800 	.word	0x40023800

080003a4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <LL_RCC_SetSysClkSource+0x24>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f023 0203 	bic.w	r2, r3, #3
 80003b4:	4904      	ldr	r1, [pc, #16]	; (80003c8 <LL_RCC_SetSysClkSource+0x24>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	608b      	str	r3, [r1, #8]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800

080003cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <LL_RCC_GetSysClkSource+0x18>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f003 030c 	and.w	r3, r3, #12
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800

080003e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003f8:	4904      	ldr	r1, [pc, #16]	; (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	608b      	str	r3, [r1, #8]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800

08000410 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	608b      	str	r3, [r1, #8]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40023800 	.word	0x40023800

08000438 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000448:	4904      	ldr	r1, [pc, #16]	; (800045c <LL_RCC_SetAPB2Prescaler+0x24>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	608b      	str	r3, [r1, #8]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	40023800 	.word	0x40023800

08000460 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <LL_RCC_SetTIMPrescaler+0x28>)
 800046a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800046e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000472:	4905      	ldr	r1, [pc, #20]	; (8000488 <LL_RCC_SetTIMPrescaler+0x28>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4313      	orrs	r3, r2
 8000478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	40023800 	.word	0x40023800

0800048c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_RCC_PLL_Enable+0x1c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <LL_RCC_PLL_Enable+0x1c>)
 8000496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800

080004ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <LL_RCC_PLL_IsReady+0x24>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800

080004d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	68f9      	ldr	r1, [r7, #12]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	4311      	orrs	r1, r2
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	0192      	lsls	r2, r2, #6
 80004f4:	430a      	orrs	r2, r1
 80004f6:	4908      	ldr	r1, [pc, #32]	; (8000518 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004f8:	4313      	orrs	r3, r2
 80004fa:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	4313      	orrs	r3, r2
 800050a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800
 800051c:	ffbf8000 	.word	0xffbf8000

08000520 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <LL_FLASH_SetLatency+0x24>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 0207 	bic.w	r2, r3, #7
 8000530:	4904      	ldr	r1, [pc, #16]	; (8000544 <LL_FLASH_SetLatency+0x24>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	600b      	str	r3, [r1, #0]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40023c00 	.word	0x40023c00

08000548 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_FLASH_GetLatency+0x18>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 0307 	and.w	r3, r3, #7
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40023c00 	.word	0x40023c00

08000564 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000574:	4904      	ldr	r1, [pc, #16]	; (8000588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	600b      	str	r3, [r1, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40007000 	.word	0x40007000

0800058c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000598:	4907      	ldr	r1, [pc, #28]	; (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800

080005bc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f043 0201 	orr.w	r2, r3, #1
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	601a      	str	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f06f 0201 	mvn.w	r2, #1
 800060a:	611a      	str	r2, [r3, #16]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b01      	cmp	r3, #1
 800062a:	d101      	bne.n	8000630 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800062c:	2301      	movs	r3, #1
 800062e:	e000      	b.n	8000632 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	f043 0201 	orr.w	r2, r3, #1
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60da      	str	r2, [r3, #12]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <SystemClock_Config>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void SystemClock_Config (void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff ff5b 	bl	8000520 <LL_FLASH_SetLatency>
    while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3) {
 800066a:	bf00      	nop
 800066c:	f7ff ff6c 	bl	8000548 <LL_FLASH_GetLatency>
 8000670:	4603      	mov	r3, r0
 8000672:	2b03      	cmp	r3, #3
 8000674:	d1fa      	bne.n	800066c <SystemClock_Config+0xc>
    }
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000676:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800067a:	f7ff ff73 	bl	8000564 <LL_PWR_SetRegulVoltageScaling>
    LL_RCC_HSI_SetCalibTrimming(16);
 800067e:	2010      	movs	r0, #16
 8000680:	f7ff fe7a 	bl	8000378 <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_HSI_Enable();
 8000684:	f7ff fe56 	bl	8000334 <LL_RCC_HSI_Enable>
    while (LL_RCC_HSI_IsReady() != 1) {
 8000688:	bf00      	nop
 800068a:	f7ff fe63 	bl	8000354 <LL_RCC_HSI_IsReady>
 800068e:	4603      	mov	r3, r0
 8000690:	2b01      	cmp	r3, #1
 8000692:	d1fa      	bne.n	800068a <SystemClock_Config+0x2a>
    }
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8000694:	2300      	movs	r3, #0
 8000696:	2264      	movs	r2, #100	; 0x64
 8000698:	2108      	movs	r1, #8
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ff1a 	bl	80004d4 <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 80006a0:	f7ff fef4 	bl	800048c <LL_RCC_PLL_Enable>
    while (LL_RCC_PLL_IsReady() != 1) {
 80006a4:	bf00      	nop
 80006a6:	f7ff ff01 	bl	80004ac <LL_RCC_PLL_IsReady>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1fa      	bne.n	80006a6 <SystemClock_Config+0x46>
    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fe99 	bl	80003e8 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80006b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ba:	f7ff fea9 	bl	8000410 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff feba 	bl	8000438 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff fe6d 	bl	80003a4 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80006ca:	bf00      	nop
 80006cc:	f7ff fe7e 	bl	80003cc <LL_RCC_GetSysClkSource>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b08      	cmp	r3, #8
 80006d4:	d1fa      	bne.n	80006cc <SystemClock_Config+0x6c>
    }
    LL_SetSystemCoreClock(100000000);
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <SystemClock_Config+0x98>)
 80006d8:	f000 fe64 	bl	80013a4 <LL_SetSystemCoreClock>
    if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 80006dc:	200f      	movs	r0, #15
 80006de:	f000 f8bf 	bl	8000860 <HAL_InitTick>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <SystemClock_Config+0x8e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
        __disable_irq();
        while (1) {
 80006ec:	e7fe      	b.n	80006ec <SystemClock_Config+0x8c>
        }
    }
    LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff feb6 	bl	8000460 <LL_RCC_SetTIMPrescaler>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	05f5e100 	.word	0x05f5e100

080006fc <TIM13_Init>:

static void TIM13_Init(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
    LL_TIM_InitTypeDef LL_TIM_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	f7ff ff3b 	bl	800058c <LL_APB1_GRP1_EnableClock>

    NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 8000716:	f7ff fd83 	bl	8000220 <__NVIC_GetPriorityGrouping>
 800071a:	4603      	mov	r3, r0
 800071c:	2200      	movs	r2, #0
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdd3 	bl	80002cc <NVIC_EncodePriority>
 8000726:	4603      	mov	r3, r0
 8000728:	4619      	mov	r1, r3
 800072a:	202c      	movs	r0, #44	; 0x2c
 800072c:	f7ff fda4 	bl	8000278 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000730:	202c      	movs	r0, #44	; 0x2c
 8000732:	f7ff fd83 	bl	800023c <__NVIC_EnableIRQ>

    LL_TIM_InitStruct.Prescaler   = 960-LL_TIM_IC_FILTER_FDIV1_N2;
 8000736:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800073a:	80bb      	strh	r3, [r7, #4]
    LL_TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
    LL_TIM_InitStruct.Autoreload  = 65535;
 8000740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000744:	60fb      	str	r3, [r7, #12]
    LL_TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

    LL_TIM_Init(TIM13,&LL_TIM_InitStruct);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <TIM13_Init+0x68>)
 8000750:	f000 fd8e 	bl	8001270 <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM13);
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <TIM13_Init+0x68>)
 8000756:	f7ff ff41 	bl	80005dc <LL_TIM_DisableARRPreload>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40001c00 	.word	0x40001c00

08000768 <main>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
int main (void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    HAL_Init(); /*Initialize the Hardware Abstraction Layer*/
 800076c:	f000 f92e 	bl	80009cc <HAL_Init>

    SystemClock_Config(); /* Configure the system clock*/
 8000770:	f7ff ff76 	bl	8000660 <SystemClock_Config>

    TIM13_Init(); /*Initialize TIM13*/
 8000774:	f7ff ffc2 	bl	80006fc <TIM13_Init>

    osKernelInitialize(); /*Initialize the RTOS Kernelr*/
 8000778:	f000 fe68 	bl	800144c <osKernelInitialize>
    osKernelStart(); /*Start the RTOS Kernel*/
 800077c:	f000 fe8a 	bl	8001494 <osKernelStart>
    while (1) {
 8000780:	e7fe      	b.n	8000780 <main+0x18>

08000782 <HAL_TIM_PeriodElapsedCallback>:

    }
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000792:	d101      	bne.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8000794:	f000 f93c 	bl	8000a10 <HAL_IncTick>
    }
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <configureTimerForRunTimeStats+0x1c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
    LL_TIM_EnableIT_UPDATE(TIM13);
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <configureTimerForRunTimeStats+0x20>)
 80007ac:	f7ff ff47 	bl	800063e <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM13);
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <configureTimerForRunTimeStats+0x20>)
 80007b2:	f7ff ff03 	bl	80005bc <LL_TIM_EnableCounter>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000078 	.word	0x20000078
 80007c0:	40001c00 	.word	0x40001c00

080007c4 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void){
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <getRunTimeCounterValue+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000078 	.word	0x20000078

080007dc <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    if(LL_TIM_IsActiveFlag_UPDATE(TIM13)){
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80007e2:	f7ff ff19 	bl	8000618 <LL_TIM_IsActiveFlag_UPDATE>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <TIM8_UP_TIM13_IRQHandler+0x20>
        ulHighFrequencyTimerTicks++;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <TIM8_UP_TIM13_IRQHandler+0x28>)
 80007f4:	6013      	str	r3, [r2, #0]
        LL_TIM_ClearFlag_UPDATE(TIM13);
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80007f8:	f7ff ff00 	bl	80005fc <LL_TIM_ClearFlag_UPDATE>
    }
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40001c00 	.word	0x40001c00
 8000804:	20000078 	.word	0x20000078

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_MspInit+0x54>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_MspInit+0x54>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 f9ab 	bl	8000ba8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	201c      	movs	r0, #28
 8000876:	f000 f997 	bl	8000ba8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800087a:	201c      	movs	r0, #28
 800087c:	f000 f9b0 	bl	8000be0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_InitTick+0xa8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <HAL_InitTick+0xa8>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_InitTick+0xa8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 0210 	add.w	r2, r7, #16
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f9c8 	bl	8000c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008ac:	f000 f9b2 	bl	8000c14 <HAL_RCC_GetPCLK1Freq>
 80008b0:	4603      	mov	r3, r0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_InitTick+0xac>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0xb0>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_InitTick+0xb0>)
 80008ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_InitTick+0xb0>)
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_InitTick+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_InitTick+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80008e6:	480a      	ldr	r0, [pc, #40]	; (8000910 <HAL_InitTick+0xb0>)
 80008e8:	f000 f9da 	bl	8000ca0 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d104      	bne.n	80008fc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <HAL_InitTick+0xb0>)
 80008f4:	f000 fa2e 	bl	8000d54 <HAL_TIM_Base_Start_IT>
 80008f8:	4603      	mov	r3, r0
 80008fa:	e000      	b.n	80008fe <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	431bde83 	.word	0x431bde83
 8000910:	2000007c 	.word	0x2000007c

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM2_IRQHandler+0x10>)
 8000946:	f000 fa75 	bl	8000e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000007c 	.word	0x2000007c

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f003 f8f9 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fedd 	bl	8000768 <main>
  bx  lr    
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009bc:	08003cf4 	.word	0x08003cf4
  ldr r2, =_sbss
 80009c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009c4:	20001000 	.word	0x20001000

080009c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_Init+0x40>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_Init+0x40>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_Init+0x40>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f8cc 	bl	8000b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ff30 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff ff02 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023c00 	.word	0x40023c00

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000004 	.word	0x20000004
 8000a34:	200000c4 	.word	0x200000c4

08000a38 <__NVIC_SetPriorityGrouping>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <__NVIC_EnableIRQ+0x38>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff4c 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bba:	f7ff ff61 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	6978      	ldr	r0, [r7, #20]
 8000bc6:	f7ff ffb1 	bl	8000b2c <NVIC_EncodePriority>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff80 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff54 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000

08000c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c18:	f7ff fff0 	bl	8000bfc <HAL_RCC_GetHCLKFreq>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	0a9b      	lsrs	r3, r3, #10
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	4903      	ldr	r1, [pc, #12]	; (8000c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c2a:	5ccb      	ldrb	r3, [r1, r3]
 8000c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	08003ce4 	.word	0x08003ce4

08000c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	220f      	movs	r2, #15
 8000c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_RCC_GetClockConfig+0x5c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 0203 	and.w	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_RCC_GetClockConfig+0x5c>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_RCC_GetClockConfig+0x5c>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_RCC_GetClockConfig+0x5c>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_RCC_GetClockConfig+0x60>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0207 	and.w	r2, r3, #7
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e041      	b.n	8000d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d106      	bne.n	8000ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f839 	bl	8000d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4610      	mov	r0, r2
 8000ce0:	f000 f9d8 	bl	8001094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d001      	beq.n	8000d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e04e      	b.n	8000e0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d022      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d96:	d01d      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d018      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d013      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00e      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d009      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d004      	beq.n	8000dd4 <HAL_TIM_Base_Start_IT+0x80>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d111      	bne.n	8000df8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d010      	beq.n	8000e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000df6:	e007      	b.n	8000e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40000400 	.word	0x40000400
 8000e20:	40000800 	.word	0x40000800
 8000e24:	40000c00 	.word	0x40000c00
 8000e28:	40010400 	.word	0x40010400
 8000e2c:	40014000 	.word	0x40014000
 8000e30:	40001800 	.word	0x40001800

08000e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d122      	bne.n	8000e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d11b      	bne.n	8000e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f06f 0202 	mvn.w	r2, #2
 8000e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f8ee 	bl	8001058 <HAL_TIM_IC_CaptureCallback>
 8000e7c:	e005      	b.n	8000e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f8e0 	bl	8001044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f8f1 	bl	800106c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d122      	bne.n	8000ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d11b      	bne.n	8000ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f06f 0204 	mvn.w	r2, #4
 8000eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f8c4 	bl	8001058 <HAL_TIM_IC_CaptureCallback>
 8000ed0:	e005      	b.n	8000ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f8b6 	bl	8001044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f8c7 	bl	800106c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d122      	bne.n	8000f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d11b      	bne.n	8000f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f06f 0208 	mvn.w	r2, #8
 8000f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f89a 	bl	8001058 <HAL_TIM_IC_CaptureCallback>
 8000f24:	e005      	b.n	8000f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f88c 	bl	8001044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f89d 	bl	800106c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b10      	cmp	r3, #16
 8000f44:	d122      	bne.n	8000f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d11b      	bne.n	8000f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f06f 0210 	mvn.w	r2, #16
 8000f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2208      	movs	r2, #8
 8000f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f870 	bl	8001058 <HAL_TIM_IC_CaptureCallback>
 8000f78:	e005      	b.n	8000f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f862 	bl	8001044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f873 	bl	800106c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10e      	bne.n	8000fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d107      	bne.n	8000fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f06f 0201 	mvn.w	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fbe5 	bl	8000782 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	2b80      	cmp	r3, #128	; 0x80
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd0:	2b80      	cmp	r3, #128	; 0x80
 8000fd2:	d107      	bne.n	8000fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f902 	bl	80011e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	2b40      	cmp	r3, #64	; 0x40
 8000ff0:	d10e      	bne.n	8001010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffc:	2b40      	cmp	r3, #64	; 0x40
 8000ffe:	d107      	bne.n	8001010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f838 	bl	8001080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	2b20      	cmp	r3, #32
 800101c:	d10e      	bne.n	800103c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	2b20      	cmp	r3, #32
 800102a:	d107      	bne.n	800103c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f06f 0220 	mvn.w	r2, #32
 8001034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8cc 	bl	80011d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <TIM_Base_SetConfig+0x114>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <TIM_Base_SetConfig+0x40>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b2:	d00f      	beq.n	80010d4 <TIM_Base_SetConfig+0x40>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <TIM_Base_SetConfig+0x118>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00b      	beq.n	80010d4 <TIM_Base_SetConfig+0x40>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3c      	ldr	r2, [pc, #240]	; (80011b0 <TIM_Base_SetConfig+0x11c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <TIM_Base_SetConfig+0x40>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <TIM_Base_SetConfig+0x120>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d003      	beq.n	80010d4 <TIM_Base_SetConfig+0x40>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3a      	ldr	r2, [pc, #232]	; (80011b8 <TIM_Base_SetConfig+0x124>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d108      	bne.n	80010e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <TIM_Base_SetConfig+0x114>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d027      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <TIM_Base_SetConfig+0x118>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d023      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <TIM_Base_SetConfig+0x11c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <TIM_Base_SetConfig+0x120>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01b      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <TIM_Base_SetConfig+0x124>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d017      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <TIM_Base_SetConfig+0x128>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <TIM_Base_SetConfig+0x12c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00f      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <TIM_Base_SetConfig+0x130>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00b      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <TIM_Base_SetConfig+0x134>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <TIM_Base_SetConfig+0x138>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d003      	beq.n	8001146 <TIM_Base_SetConfig+0xb2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <TIM_Base_SetConfig+0x13c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d108      	bne.n	8001158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800114c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <TIM_Base_SetConfig+0x114>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d003      	beq.n	800118c <TIM_Base_SetConfig+0xf8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <TIM_Base_SetConfig+0x124>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d103      	bne.n	8001194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	615a      	str	r2, [r3, #20]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40000800 	.word	0x40000800
 80011b4:	40000c00 	.word	0x40000c00
 80011b8:	40010400 	.word	0x40010400
 80011bc:	40014000 	.word	0x40014000
 80011c0:	40014400 	.word	0x40014400
 80011c4:	40014800 	.word	0x40014800
 80011c8:	40001800 	.word	0x40001800
 80011cc:	40001c00 	.word	0x40001c00
 80011d0:	40002000 	.word	0x40002000

080011d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_TIM_SetPrescaler>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_TIM_SetAutoReload>:
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_TIM_SetRepetitionCounter>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <LL_TIM_Init+0x108>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <LL_TIM_Init+0x40>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128e:	d00f      	beq.n	80012b0 <LL_TIM_Init+0x40>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3a      	ldr	r2, [pc, #232]	; (800137c <LL_TIM_Init+0x10c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00b      	beq.n	80012b0 <LL_TIM_Init+0x40>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a39      	ldr	r2, [pc, #228]	; (8001380 <LL_TIM_Init+0x110>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <LL_TIM_Init+0x40>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a38      	ldr	r2, [pc, #224]	; (8001384 <LL_TIM_Init+0x114>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d003      	beq.n	80012b0 <LL_TIM_Init+0x40>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a37      	ldr	r2, [pc, #220]	; (8001388 <LL_TIM_Init+0x118>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d106      	bne.n	80012be <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <LL_TIM_Init+0x108>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <LL_TIM_Init+0xae>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012cc:	d027      	beq.n	800131e <LL_TIM_Init+0xae>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a2a      	ldr	r2, [pc, #168]	; (800137c <LL_TIM_Init+0x10c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d023      	beq.n	800131e <LL_TIM_Init+0xae>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a29      	ldr	r2, [pc, #164]	; (8001380 <LL_TIM_Init+0x110>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <LL_TIM_Init+0xae>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <LL_TIM_Init+0x114>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01b      	beq.n	800131e <LL_TIM_Init+0xae>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <LL_TIM_Init+0x118>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d017      	beq.n	800131e <LL_TIM_Init+0xae>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <LL_TIM_Init+0x11c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <LL_TIM_Init+0xae>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <LL_TIM_Init+0x120>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00f      	beq.n	800131e <LL_TIM_Init+0xae>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <LL_TIM_Init+0x124>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00b      	beq.n	800131e <LL_TIM_Init+0xae>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a23      	ldr	r2, [pc, #140]	; (8001398 <LL_TIM_Init+0x128>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <LL_TIM_Init+0xae>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <LL_TIM_Init+0x12c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d003      	beq.n	800131e <LL_TIM_Init+0xae>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <LL_TIM_Init+0x130>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d106      	bne.n	800132c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4619      	mov	r1, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff6d 	bl	8001218 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff59 	bl	80011fc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LL_TIM_Init+0x108>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d003      	beq.n	800135a <LL_TIM_Init+0xea>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <LL_TIM_Init+0x118>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d105      	bne.n	8001366 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff67 	bl	8001234 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff72 	bl	8001250 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40010000 	.word	0x40010000
 800137c:	40000400 	.word	0x40000400
 8001380:	40000800 	.word	0x40000800
 8001384:	40000c00 	.word	0x40000c00
 8001388:	40010400 	.word	0x40010400
 800138c:	40014000 	.word	0x40014000
 8001390:	40014400 	.word	0x40014400
 8001394:	40014800 	.word	0x40014800
 8001398:	40001800 	.word	0x40001800
 800139c:	40001c00 	.word	0x40001c00
 80013a0:	40002000 	.word	0x40002000

080013a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <LL_SetSystemCoreClock+0x1c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000

080013c4 <__NVIC_SetPriority>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Handler+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001420:	f001 fc26 	bl	8002c70 <xTaskGetSchedulerState>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800142a:	f002 fa0d 	bl	8003848 <xPortSysTickHandler>
  }
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800143c:	2100      	movs	r1, #0
 800143e:	f06f 0004 	mvn.w	r0, #4
 8001442:	f7ff ffbf 	bl	80013c4 <__NVIC_SetPriority>
#endif
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001452:	f3ef 8305 	mrs	r3, IPSR
 8001456:	603b      	str	r3, [r7, #0]
  return(result);
 8001458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800145e:	f06f 0305 	mvn.w	r3, #5
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	e00c      	b.n	8001480 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <osKernelInitialize+0x44>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <osKernelInitialize+0x44>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	e002      	b.n	8001480 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200000c8 	.word	0x200000c8

08001494 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800149a:	f3ef 8305 	mrs	r3, IPSR
 800149e:	603b      	str	r3, [r7, #0]
  return(result);
 80014a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80014a6:	f06f 0305 	mvn.w	r3, #5
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	e010      	b.n	80014d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <osKernelStart+0x48>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d109      	bne.n	80014ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80014b6:	f7ff ffbf 	bl	8001438 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <osKernelStart+0x48>)
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80014c0:	f000 ff5c 	bl	800237c <vTaskStartScheduler>
      stat = osOK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	e002      	b.n	80014d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000c8 	.word	0x200000c8

080014e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <vApplicationGetIdleTaskMemory+0x2c>)
 80014f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <vApplicationGetIdleTaskMemory+0x30>)
 80014f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200000cc 	.word	0x200000cc
 8001510:	2000017c 	.word	0x2000017c

08001514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <vApplicationGetTimerTaskMemory+0x2c>)
 8001524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <vApplicationGetTimerTaskMemory+0x30>)
 800152a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	2000037c 	.word	0x2000037c
 8001544:	2000042c 	.word	0x2000042c

08001548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f103 0208 	add.w	r2, r3, #8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f103 0208 	add.w	r2, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f103 0208 	add.w	r2, r3, #8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d103      	bne.n	800160a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e00c      	b.n	8001624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3308      	adds	r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	e002      	b.n	8001618 <vListInsert+0x2e>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	d2f6      	bcs.n	8001612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6892      	ldr	r2, [r2, #8]
 8001672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6852      	ldr	r2, [r2, #4]
 800167c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d103      	bne.n	8001690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10a      	bne.n	80016da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	f3bf 8f6f 	isb	sy
 80016d0:	f3bf 8f4f 	dsb	sy
 80016d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80016d6:	bf00      	nop
 80016d8:	e7fe      	b.n	80016d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80016da:	f002 f823 	bl	8003724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	441a      	add	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	3b01      	subs	r3, #1
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	441a      	add	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	22ff      	movs	r2, #255	; 0xff
 800171e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d114      	bne.n	800175a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01a      	beq.n	800176e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3310      	adds	r3, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f8d5 	bl	80028ec <xTaskRemoveFromEventList>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d012      	beq.n	800176e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <xQueueGenericReset+0xcc>)
 800174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	e009      	b.n	800176e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3310      	adds	r3, #16
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fef2 	bl	8001548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3324      	adds	r3, #36	; 0x24
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff feed 	bl	8001548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800176e:	f002 f809 	bl	8003784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	e000ed04 	.word	0xe000ed04

08001780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001798:	f383 8811 	msr	BASEPRI, r3
 800179c:	f3bf 8f6f 	isb	sy
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80017a6:	bf00      	nop
 80017a8:	e7fe      	b.n	80017a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80017b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80017c2:	bf00      	nop
 80017c4:	e7fe      	b.n	80017c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <xQueueGenericCreateStatic+0x52>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <xQueueGenericCreateStatic+0x56>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <xQueueGenericCreateStatic+0x58>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80017dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e0:	f383 8811 	msr	BASEPRI, r3
 80017e4:	f3bf 8f6f 	isb	sy
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	623b      	str	r3, [r7, #32]
}
 80017ee:	bf00      	nop
 80017f0:	e7fe      	b.n	80017f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <xQueueGenericCreateStatic+0x7e>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <xQueueGenericCreateStatic+0x82>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <xQueueGenericCreateStatic+0x84>
 8001802:	2300      	movs	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	61fb      	str	r3, [r7, #28]
}
 800181a:	bf00      	nop
 800181c:	e7fe      	b.n	800181c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800181e:	2350      	movs	r3, #80	; 0x50
 8001820:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b50      	cmp	r3, #80	; 0x50
 8001826:	d00a      	beq.n	800183e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182c:	f383 8811 	msr	BASEPRI, r3
 8001830:	f3bf 8f6f 	isb	sy
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	61bb      	str	r3, [r7, #24]
}
 800183a:	bf00      	nop
 800183c:	e7fe      	b.n	800183c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800183e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f805 	bl	8001870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001868:	4618      	mov	r0, r3
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e002      	b.n	8001892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800189e:	2101      	movs	r1, #1
 80018a0:	69b8      	ldr	r0, [r7, #24]
 80018a2:	f7ff ff05 	bl	80016b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	; 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <xQueueGenericSend+0x32>
	__asm volatile
 80018d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d8:	f383 8811 	msr	BASEPRI, r3
 80018dc:	f3bf 8f6f 	isb	sy
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018e6:	bf00      	nop
 80018e8:	e7fe      	b.n	80018e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <xQueueGenericSend+0x40>
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <xQueueGenericSend+0x44>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <xQueueGenericSend+0x46>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10a      	bne.n	8001918 <xQueueGenericSend+0x60>
	__asm volatile
 8001902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001906:	f383 8811 	msr	BASEPRI, r3
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001914:	bf00      	nop
 8001916:	e7fe      	b.n	8001916 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d103      	bne.n	8001926 <xQueueGenericSend+0x6e>
 800191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <xQueueGenericSend+0x72>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <xQueueGenericSend+0x74>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <xQueueGenericSend+0x8e>
	__asm volatile
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	623b      	str	r3, [r7, #32]
}
 8001942:	bf00      	nop
 8001944:	e7fe      	b.n	8001944 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001946:	f001 f993 	bl	8002c70 <xTaskGetSchedulerState>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <xQueueGenericSend+0x9e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <xQueueGenericSend+0xa2>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <xQueueGenericSend+0xa4>
 800195a:	2300      	movs	r3, #0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <xQueueGenericSend+0xbe>
	__asm volatile
 8001960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
 8001970:	61fb      	str	r3, [r7, #28]
}
 8001972:	bf00      	nop
 8001974:	e7fe      	b.n	8001974 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001976:	f001 fed5 	bl	8003724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	429a      	cmp	r2, r3
 8001984:	d302      	bcc.n	800198c <xQueueGenericSend+0xd4>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d129      	bne.n	80019e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001992:	f000 fa0b 	bl	8001dac <prvCopyDataToQueue>
 8001996:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	3324      	adds	r3, #36	; 0x24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 ffa1 	bl	80028ec <xTaskRemoveFromEventList>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <xQueueGenericSend+0x1f8>)
 80019b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	e00a      	b.n	80019d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80019c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <xQueueGenericSend+0x1f8>)
 80019ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80019d8:	f001 fed4 	bl	8003784 <vPortExitCritical>
				return pdPASS;
 80019dc:	2301      	movs	r3, #1
 80019de:	e063      	b.n	8001aa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019e6:	f001 fecd 	bl	8003784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e05c      	b.n	8001aa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d106      	bne.n	8001a02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 ffdb 	bl	80029b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019fe:	2301      	movs	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a02:	f001 febf 	bl	8003784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a06:	f000 fd2b 	bl	8002460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a0a:	f001 fe8b 	bl	8003724 <vPortEnterCritical>
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1a:	d103      	bne.n	8001a24 <xQueueGenericSend+0x16c>
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d103      	bne.n	8001a3a <xQueueGenericSend+0x182>
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a3a:	f001 fea3 	bl	8003784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a3e:	1d3a      	adds	r2, r7, #4
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 ffca 	bl	80029e0 <xTaskCheckForTimeOut>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d124      	bne.n	8001a9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a54:	f000 faa2 	bl	8001f9c <prvIsQueueFull>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d018      	beq.n	8001a90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	3310      	adds	r3, #16
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fef0 	bl	800284c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a6e:	f000 fa2d 	bl	8001ecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a72:	f000 fd03 	bl	800247c <xTaskResumeAll>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f af7c 	bne.w	8001976 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <xQueueGenericSend+0x1f8>)
 8001a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	e772      	b.n	8001976 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a92:	f000 fa1b 	bl	8001ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a96:	f000 fcf1 	bl	800247c <xTaskResumeAll>
 8001a9a:	e76c      	b.n	8001976 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a9e:	f000 fa15 	bl	8001ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001aa2:	f000 fceb 	bl	800247c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3738      	adds	r7, #56	; 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	e000ed04 	.word	0xe000ed04

08001ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b090      	sub	sp, #64	; 0x40
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ade:	bf00      	nop
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <xQueueGenericSendFromISR+0x3c>
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <xQueueGenericSendFromISR+0x40>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <xQueueGenericSendFromISR+0x42>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b0c:	bf00      	nop
 8001b0e:	e7fe      	b.n	8001b0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d103      	bne.n	8001b1e <xQueueGenericSendFromISR+0x6a>
 8001b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <xQueueGenericSendFromISR+0x6e>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <xQueueGenericSendFromISR+0x70>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2c:	f383 8811 	msr	BASEPRI, r3
 8001b30:	f3bf 8f6f 	isb	sy
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	623b      	str	r3, [r7, #32]
}
 8001b3a:	bf00      	nop
 8001b3c:	e7fe      	b.n	8001b3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b3e:	f001 fed3 	bl	80038e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b42:	f3ef 8211 	mrs	r2, BASEPRI
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	61fa      	str	r2, [r7, #28]
 8001b58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <xQueueGenericSendFromISR+0xbc>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d12f      	bne.n	8001bd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b86:	f000 f911 	bl	8001dac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001b8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d112      	bne.n	8001bba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d016      	beq.n	8001bca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9e:	3324      	adds	r3, #36	; 0x24
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fea3 	bl	80028ec <xTaskRemoveFromEventList>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00e      	beq.n	8001bca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e007      	b.n	8001bca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	b25a      	sxtb	r2, r3
 8001bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001bce:	e001      	b.n	8001bd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001bde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3740      	adds	r7, #64	; 0x40
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <xQueueReceive+0x30>
	__asm volatile
 8001c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f3bf 8f4f 	dsb	sy
 8001c16:	623b      	str	r3, [r7, #32]
}
 8001c18:	bf00      	nop
 8001c1a:	e7fe      	b.n	8001c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <xQueueReceive+0x3e>
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <xQueueReceive+0x42>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <xQueueReceive+0x44>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <xQueueReceive+0x5e>
	__asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	61fb      	str	r3, [r7, #28]
}
 8001c46:	bf00      	nop
 8001c48:	e7fe      	b.n	8001c48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c4a:	f001 f811 	bl	8002c70 <xTaskGetSchedulerState>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <xQueueReceive+0x6e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <xQueueReceive+0x72>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <xQueueReceive+0x74>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <xQueueReceive+0x8e>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	61bb      	str	r3, [r7, #24]
}
 8001c76:	bf00      	nop
 8001c78:	e7fe      	b.n	8001c78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c7a:	f001 fd53 	bl	8003724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01f      	beq.n	8001cca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c8e:	f000 f8f7 	bl	8001e80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00f      	beq.n	8001cc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fe20 	bl	80028ec <xTaskRemoveFromEventList>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <xQueueReceive+0x1bc>)
 8001cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001cc2:	f001 fd5f 	bl	8003784 <vPortExitCritical>
				return pdPASS;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e069      	b.n	8001d9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cd0:	f001 fd58 	bl	8003784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e062      	b.n	8001d9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fe66 	bl	80029b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cec:	f001 fd4a 	bl	8003784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cf0:	f000 fbb6 	bl	8002460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cf4:	f001 fd16 	bl	8003724 <vPortEnterCritical>
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d103      	bne.n	8001d0e <xQueueReceive+0x122>
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d103      	bne.n	8001d24 <xQueueReceive+0x138>
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d24:	f001 fd2e 	bl	8003784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fe55 	bl	80029e0 <xTaskCheckForTimeOut>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d123      	bne.n	8001d84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d3e:	f000 f917 	bl	8001f70 <prvIsQueueEmpty>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d017      	beq.n	8001d78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	3324      	adds	r3, #36	; 0x24
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fd7b 	bl	800284c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d58:	f000 f8b8 	bl	8001ecc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d5c:	f000 fb8e 	bl	800247c <xTaskResumeAll>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d189      	bne.n	8001c7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <xQueueReceive+0x1bc>)
 8001d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	e780      	b.n	8001c7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d7a:	f000 f8a7 	bl	8001ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d7e:	f000 fb7d 	bl	800247c <xTaskResumeAll>
 8001d82:	e77a      	b.n	8001c7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d86:	f000 f8a1 	bl	8001ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d8a:	f000 fb77 	bl	800247c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d90:	f000 f8ee 	bl	8001f70 <prvIsQueueEmpty>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f43f af6f 	beq.w	8001c7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3730      	adds	r7, #48	; 0x30
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000ed04 	.word	0xe000ed04

08001dac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10d      	bne.n	8001de6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d14d      	bne.n	8001e6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 ff68 	bl	8002cac <xTaskPriorityDisinherit>
 8001ddc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e043      	b.n	8001e6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d119      	bne.n	8001e20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6858      	ldr	r0, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	461a      	mov	r2, r3
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	f001 fef6 	bl	8003be8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	441a      	add	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d32b      	bcc.n	8001e6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	e026      	b.n	8001e6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68d8      	ldr	r0, [r3, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	f001 fedc 	bl	8003be8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	425b      	negs	r3, r3
 8001e3a:	441a      	add	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	425b      	negs	r3, r3
 8001e56:	441a      	add	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d105      	bne.n	8001e6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001e76:	697b      	ldr	r3, [r7, #20]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d018      	beq.n	8001ec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d303      	bcc.n	8001eb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f001 fe92 	bl	8003be8 <memcpy>
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001ed4:	f001 fc26 	bl	8003724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ee0:	e011      	b.n	8001f06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3324      	adds	r3, #36	; 0x24
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fcfc 	bl	80028ec <xTaskRemoveFromEventList>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001efa:	f000 fdd3 	bl	8002aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dce9      	bgt.n	8001ee2 <prvUnlockQueue+0x16>
 8001f0e:	e000      	b.n	8001f12 <prvUnlockQueue+0x46>
					break;
 8001f10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	22ff      	movs	r2, #255	; 0xff
 8001f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001f1a:	f001 fc33 	bl	8003784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001f1e:	f001 fc01 	bl	8003724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f2a:	e011      	b.n	8001f50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3310      	adds	r3, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fcd7 	bl	80028ec <xTaskRemoveFromEventList>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001f44:	f000 fdae 	bl	8002aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	dce9      	bgt.n	8001f2c <prvUnlockQueue+0x60>
 8001f58:	e000      	b.n	8001f5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001f5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001f64:	f001 fc0e 	bl	8003784 <vPortExitCritical>
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f78:	f001 fbd4 	bl	8003724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e001      	b.n	8001f8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f8e:	f001 fbf9 	bl	8003784 <vPortExitCritical>

	return xReturn;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001fa4:	f001 fbbe 	bl	8003724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d102      	bne.n	8001fba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e001      	b.n	8001fbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001fbe:	f001 fbe1 	bl	8003784 <vPortExitCritical>

	return xReturn;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	e014      	b.n	8002006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <vQueueAddToRegistry+0x50>)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <vQueueAddToRegistry+0x50>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <vQueueAddToRegistry+0x50>)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001ffe:	e006      	b.n	800200e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b07      	cmp	r3, #7
 800200a:	d9e7      	bls.n	8001fdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000082c 	.word	0x2000082c

08002020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002030:	f001 fb78 	bl	8003724 <vPortEnterCritical>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800203a:	b25b      	sxtb	r3, r3
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d103      	bne.n	800204a <vQueueWaitForMessageRestricted+0x2a>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002050:	b25b      	sxtb	r3, r3
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d103      	bne.n	8002060 <vQueueWaitForMessageRestricted+0x40>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002060:	f001 fb90 	bl	8003784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3324      	adds	r3, #36	; 0x24
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fc0d 	bl	8002894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff26 	bl	8001ecc <prvUnlockQueue>
	}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af04      	add	r7, sp, #16
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	623b      	str	r3, [r7, #32]
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <xTaskCreateStatic+0x46>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	61fb      	str	r3, [r7, #28]
}
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020ce:	23b0      	movs	r3, #176	; 0xb0
 80020d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2bb0      	cmp	r3, #176	; 0xb0
 80020d6:	d00a      	beq.n	80020ee <xTaskCreateStatic+0x66>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	61bb      	str	r3, [r7, #24]
}
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01e      	beq.n	8002134 <xTaskCreateStatic+0xac>
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800210e:	2300      	movs	r3, #0
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f80c 	bl	8002144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800212c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800212e:	f000 f8b5 	bl	800229c <prvAddNewTaskToReadyList>
 8002132:	e001      	b.n	8002138 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002138:	697b      	ldr	r3, [r7, #20]
	}
 800213a:	4618      	mov	r0, r3
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	21a5      	movs	r1, #165	; 0xa5
 800215e:	f001 fcbf 	bl	8003ae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800216c:	3b01      	subs	r3, #1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	617b      	str	r3, [r7, #20]
}
 8002198:	bf00      	nop
 800219a:	e7fe      	b.n	800219a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01f      	beq.n	80021e8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e012      	b.n	80021d4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	7819      	ldrb	r1, [r3, #0]
 80021b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	4413      	add	r3, r2
 80021bc:	3334      	adds	r3, #52	; 0x34
 80021be:	460a      	mov	r2, r1
 80021c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	d9e9      	bls.n	80021ae <prvInitialiseNewTask+0x6a>
 80021da:	e000      	b.n	80021de <prvInitialiseNewTask+0x9a>
			{
				break;
 80021dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e6:	e003      	b.n	80021f0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	2b37      	cmp	r3, #55	; 0x37
 80021f4:	d901      	bls.n	80021fa <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021f6:	2337      	movs	r3, #55	; 0x37
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002204:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	3304      	adds	r3, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f9b9 	bl	8001588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	3318      	adds	r3, #24
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f9b4 	bl	8001588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	2200      	movs	r2, #0
 800223a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	2200      	movs	r2, #0
 8002240:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	2200      	movs	r2, #0
 8002248:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	224c      	movs	r2, #76	; 0x4c
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f001 fc43 	bl	8003ae0 <memset>
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <prvInitialiseNewTask+0x14c>)
 800225e:	661a      	str	r2, [r3, #96]	; 0x60
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <prvInitialiseNewTask+0x150>)
 8002264:	665a      	str	r2, [r3, #100]	; 0x64
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <prvInitialiseNewTask+0x154>)
 800226a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	68f9      	ldr	r1, [r7, #12]
 8002270:	69b8      	ldr	r0, [r7, #24]
 8002272:	f001 f92b 	bl	80034cc <pxPortInitialiseStack>
 8002276:	4602      	mov	r2, r0
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000ec0 	.word	0x20000ec0
 8002294:	20000f28 	.word	0x20000f28
 8002298:	20000f90 	.word	0x20000f90

0800229c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022a4:	f001 fa3e 	bl	8003724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <prvAddNewTaskToReadyList+0xc4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <prvAddNewTaskToReadyList+0xc4>)
 80022b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <prvAddNewTaskToReadyList+0xc8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <prvAddNewTaskToReadyList+0xc8>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <prvAddNewTaskToReadyList+0xc4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d110      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022c8:	f000 fc10 	bl	8002aec <prvInitialiseTaskLists>
 80022cc:	e00d      	b.n	80022ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <prvAddNewTaskToReadyList+0xcc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <prvAddNewTaskToReadyList+0xc8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d802      	bhi.n	80022ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <prvAddNewTaskToReadyList+0xc8>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <prvAddNewTaskToReadyList+0xd0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <prvAddNewTaskToReadyList+0xd0>)
 80022f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <prvAddNewTaskToReadyList+0xd0>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <prvAddNewTaskToReadyList+0xd4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d903      	bls.n	8002310 <prvAddNewTaskToReadyList+0x74>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <prvAddNewTaskToReadyList+0xd4>)
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <prvAddNewTaskToReadyList+0xd8>)
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7ff f93b 	bl	80015a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800232c:	f001 fa2a 	bl	8003784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <prvAddNewTaskToReadyList+0xcc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <prvAddNewTaskToReadyList+0xc8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	429a      	cmp	r2, r3
 8002344:	d207      	bcs.n	8002356 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <prvAddNewTaskToReadyList+0xdc>)
 8002348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000d40 	.word	0x20000d40
 8002364:	2000086c 	.word	0x2000086c
 8002368:	20000d4c 	.word	0x20000d4c
 800236c:	20000d5c 	.word	0x20000d5c
 8002370:	20000d48 	.word	0x20000d48
 8002374:	20000870 	.word	0x20000870
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800238a:	463a      	mov	r2, r7
 800238c:	1d39      	adds	r1, r7, #4
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8a4 	bl	80014e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	9202      	str	r2, [sp, #8]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2300      	movs	r3, #0
 80023a8:	460a      	mov	r2, r1
 80023aa:	4925      	ldr	r1, [pc, #148]	; (8002440 <vTaskStartScheduler+0xc4>)
 80023ac:	4825      	ldr	r0, [pc, #148]	; (8002444 <vTaskStartScheduler+0xc8>)
 80023ae:	f7ff fe6b 	bl	8002088 <xTaskCreateStatic>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <vTaskStartScheduler+0xcc>)
 80023b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <vTaskStartScheduler+0xcc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80023c0:	2301      	movs	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e001      	b.n	80023ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80023d0:	f000 fd2e 	bl	8002e30 <xTimerCreateTimerTask>
 80023d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d11d      	bne.n	8002418 <vTaskStartScheduler+0x9c>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	613b      	str	r3, [r7, #16]
}
 80023ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <vTaskStartScheduler+0xd0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	335c      	adds	r3, #92	; 0x5c
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <vTaskStartScheduler+0xd4>)
 80023f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <vTaskStartScheduler+0xd8>)
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <vTaskStartScheduler+0xdc>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <vTaskStartScheduler+0xe0>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800240e:	f7fe f9c7 	bl	80007a0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002412:	f001 f8e5 	bl	80035e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002416:	e00e      	b.n	8002436 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d10a      	bne.n	8002436 <vTaskStartScheduler+0xba>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60fb      	str	r3, [r7, #12]
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <vTaskStartScheduler+0xb8>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	08003ccc 	.word	0x08003ccc
 8002444:	08002abd 	.word	0x08002abd
 8002448:	20000d64 	.word	0x20000d64
 800244c:	2000086c 	.word	0x2000086c
 8002450:	20000058 	.word	0x20000058
 8002454:	20000d60 	.word	0x20000d60
 8002458:	20000d4c 	.word	0x20000d4c
 800245c:	20000d44 	.word	0x20000d44

08002460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <vTaskSuspendAll+0x18>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a03      	ldr	r2, [pc, #12]	; (8002478 <vTaskSuspendAll+0x18>)
 800246c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	20000d68 	.word	0x20000d68

0800247c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <xTaskResumeAll+0x118>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	603b      	str	r3, [r7, #0]
}
 80024a4:	bf00      	nop
 80024a6:	e7fe      	b.n	80024a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024a8:	f001 f93c 	bl	8003724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <xTaskResumeAll+0x118>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	4a38      	ldr	r2, [pc, #224]	; (8002594 <xTaskResumeAll+0x118>)
 80024b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <xTaskResumeAll+0x118>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d162      	bne.n	8002584 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <xTaskResumeAll+0x11c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d05e      	beq.n	8002584 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024c6:	e02f      	b.n	8002528 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <xTaskResumeAll+0x120>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3318      	adds	r3, #24
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f8c1 	bl	800165c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3304      	adds	r3, #4
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f8bc 	bl	800165c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <xTaskResumeAll+0x124>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d903      	bls.n	80024f8 <xTaskResumeAll+0x7c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <xTaskResumeAll+0x124>)
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <xTaskResumeAll+0x128>)
 8002506:	441a      	add	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3304      	adds	r3, #4
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f7ff f847 	bl	80015a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <xTaskResumeAll+0x12c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <xTaskResumeAll+0x130>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <xTaskResumeAll+0x120>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1cb      	bne.n	80024c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002536:	f000 fb7b 	bl	8002c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <xTaskResumeAll+0x134>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002546:	f000 f847 	bl	80025d8 <xTaskIncrementTick>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <xTaskResumeAll+0x130>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3b01      	subs	r3, #1
 800255a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f1      	bne.n	8002546 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <xTaskResumeAll+0x134>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <xTaskResumeAll+0x130>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002570:	2301      	movs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <xTaskResumeAll+0x138>)
 8002576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002584:	f001 f8fe 	bl	8003784 <vPortExitCritical>

	return xAlreadyYielded;
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000d68 	.word	0x20000d68
 8002598:	20000d40 	.word	0x20000d40
 800259c:	20000d00 	.word	0x20000d00
 80025a0:	20000d48 	.word	0x20000d48
 80025a4:	20000870 	.word	0x20000870
 80025a8:	2000086c 	.word	0x2000086c
 80025ac:	20000d54 	.word	0x20000d54
 80025b0:	20000d50 	.word	0x20000d50
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <xTaskGetTickCount+0x1c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000d44 	.word	0x20000d44

080025d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025e2:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <xTaskIncrementTick+0x148>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 808f 	bne.w	800270a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <xTaskIncrementTick+0x14c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <xTaskIncrementTick+0x14c>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d120      	bne.n	8002642 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002600:	4b49      	ldr	r3, [pc, #292]	; (8002728 <xTaskIncrementTick+0x150>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <xTaskIncrementTick+0x48>
	__asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	603b      	str	r3, [r7, #0]
}
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <xTaskIncrementTick+0x46>
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <xTaskIncrementTick+0x150>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <xTaskIncrementTick+0x154>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <xTaskIncrementTick+0x150>)
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4a3f      	ldr	r2, [pc, #252]	; (800272c <xTaskIncrementTick+0x154>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <xTaskIncrementTick+0x158>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <xTaskIncrementTick+0x158>)
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	f000 faf7 	bl	8002c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002642:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <xTaskIncrementTick+0x15c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	429a      	cmp	r2, r3
 800264a:	d349      	bcc.n	80026e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <xTaskIncrementTick+0x150>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <xTaskIncrementTick+0x15c>)
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	601a      	str	r2, [r3, #0]
					break;
 800265e:	e03f      	b.n	80026e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <xTaskIncrementTick+0x150>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d203      	bcs.n	8002680 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002678:	4a2e      	ldr	r2, [pc, #184]	; (8002734 <xTaskIncrementTick+0x15c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800267e:	e02f      	b.n	80026e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3304      	adds	r3, #4
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe ffe9 	bl	800165c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3318      	adds	r3, #24
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ffe0 	bl	800165c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <xTaskIncrementTick+0x160>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d903      	bls.n	80026b0 <xTaskIncrementTick+0xd8>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <xTaskIncrementTick+0x160>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <xTaskIncrementTick+0x164>)
 80026be:	441a      	add	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7fe ff6b 	bl	80015a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <xTaskIncrementTick+0x168>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3b8      	bcc.n	800264c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026da:	2301      	movs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026de:	e7b5      	b.n	800264c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <xTaskIncrementTick+0x168>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4915      	ldr	r1, [pc, #84]	; (800273c <xTaskIncrementTick+0x164>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d901      	bls.n	80026fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <xTaskIncrementTick+0x16c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e004      	b.n	8002714 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <xTaskIncrementTick+0x170>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <xTaskIncrementTick+0x170>)
 8002712:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002714:	697b      	ldr	r3, [r7, #20]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000d68 	.word	0x20000d68
 8002724:	20000d44 	.word	0x20000d44
 8002728:	20000cf8 	.word	0x20000cf8
 800272c:	20000cfc 	.word	0x20000cfc
 8002730:	20000d58 	.word	0x20000d58
 8002734:	20000d60 	.word	0x20000d60
 8002738:	20000d48 	.word	0x20000d48
 800273c:	20000870 	.word	0x20000870
 8002740:	2000086c 	.word	0x2000086c
 8002744:	20000d54 	.word	0x20000d54
 8002748:	20000d50 	.word	0x20000d50

0800274c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <vTaskSwitchContext+0xe0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <vTaskSwitchContext+0xe4>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002760:	e05f      	b.n	8002822 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <vTaskSwitchContext+0xe4>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002768:	f7fe f82c 	bl	80007c4 <getRunTimeCounterValue>
 800276c:	4603      	mov	r3, r0
 800276e:	4a31      	ldr	r2, [pc, #196]	; (8002834 <vTaskSwitchContext+0xe8>)
 8002770:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002772:	4b30      	ldr	r3, [pc, #192]	; (8002834 <vTaskSwitchContext+0xe8>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <vTaskSwitchContext+0xec>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d909      	bls.n	8002792 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <vTaskSwitchContext+0xe8>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <vTaskSwitchContext+0xec>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1ad1      	subs	r1, r2, r3
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <vTaskSwitchContext+0xf0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800278e:	440a      	add	r2, r1
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <vTaskSwitchContext+0xe8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <vTaskSwitchContext+0xec>)
 8002798:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <vTaskSwitchContext+0xf4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e010      	b.n	80027c4 <vTaskSwitchContext+0x78>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <vTaskSwitchContext+0x72>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	607b      	str	r3, [r7, #4]
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <vTaskSwitchContext+0x70>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	491f      	ldr	r1, [pc, #124]	; (8002844 <vTaskSwitchContext+0xf8>)
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0e4      	beq.n	80027a2 <vTaskSwitchContext+0x56>
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <vTaskSwitchContext+0xf8>)
 80027e4:	4413      	add	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3308      	adds	r3, #8
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d104      	bne.n	8002808 <vTaskSwitchContext+0xbc>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <vTaskSwitchContext+0xf0>)
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <vTaskSwitchContext+0xf4>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <vTaskSwitchContext+0xf0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	335c      	adds	r3, #92	; 0x5c
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <vTaskSwitchContext+0xfc>)
 8002820:	6013      	str	r3, [r2, #0]
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000d68 	.word	0x20000d68
 8002830:	20000d54 	.word	0x20000d54
 8002834:	20000d70 	.word	0x20000d70
 8002838:	20000d6c 	.word	0x20000d6c
 800283c:	2000086c 	.word	0x2000086c
 8002840:	20000d48 	.word	0x20000d48
 8002844:	20000870 	.word	0x20000870
 8002848:	20000058 	.word	0x20000058

0800284c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	60fb      	str	r3, [r7, #12]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <vTaskPlaceOnEventList+0x44>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3318      	adds	r3, #24
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe feb5 	bl	80015ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002880:	2101      	movs	r1, #1
 8002882:	6838      	ldr	r0, [r7, #0]
 8002884:	f000 fa80 	bl	8002d88 <prvAddCurrentTaskToDelayedList>
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000086c 	.word	0x2000086c

08002894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	617b      	str	r3, [r7, #20]
}
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3318      	adds	r3, #24
 80028c2:	4619      	mov	r1, r3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7fe fe6c 	bl	80015a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68b8      	ldr	r0, [r7, #8]
 80028da:	f000 fa55 	bl	8002d88 <prvAddCurrentTaskToDelayedList>
	}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000086c 	.word	0x2000086c

080028ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	60fb      	str	r3, [r7, #12]
}
 8002914:	bf00      	nop
 8002916:	e7fe      	b.n	8002916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3318      	adds	r3, #24
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fe9d 	bl	800165c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <xTaskRemoveFromEventList+0xb0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11d      	bne.n	8002966 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3304      	adds	r3, #4
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fe94 	bl	800165c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <xTaskRemoveFromEventList+0xb4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d903      	bls.n	8002948 <xTaskRemoveFromEventList+0x5c>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <xTaskRemoveFromEventList+0xb4>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <xTaskRemoveFromEventList+0xb8>)
 8002956:	441a      	add	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe fe1f 	bl	80015a2 <vListInsertEnd>
 8002964:	e005      	b.n	8002972 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3318      	adds	r3, #24
 800296a:	4619      	mov	r1, r3
 800296c:	480e      	ldr	r0, [pc, #56]	; (80029a8 <xTaskRemoveFromEventList+0xbc>)
 800296e:	f7fe fe18 	bl	80015a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <xTaskRemoveFromEventList+0xc0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	429a      	cmp	r2, r3
 800297e:	d905      	bls.n	800298c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <xTaskRemoveFromEventList+0xc4>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e001      	b.n	8002990 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002990:	697b      	ldr	r3, [r7, #20]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000d68 	.word	0x20000d68
 80029a0:	20000d48 	.word	0x20000d48
 80029a4:	20000870 	.word	0x20000870
 80029a8:	20000d00 	.word	0x20000d00
 80029ac:	2000086c 	.word	0x2000086c
 80029b0:	20000d54 	.word	0x20000d54

080029b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <vTaskInternalSetTimeOutState+0x24>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <vTaskInternalSetTimeOutState+0x28>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000d58 	.word	0x20000d58
 80029dc:	20000d44 	.word	0x20000d44

080029e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	613b      	str	r3, [r7, #16]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	60fb      	str	r3, [r7, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002a22:	f000 fe7f 	bl	8003724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <xTaskCheckForTimeOut+0xbc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d102      	bne.n	8002a46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	e023      	b.n	8002a8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <xTaskCheckForTimeOut+0xc0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d007      	beq.n	8002a62 <xTaskCheckForTimeOut+0x82>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d302      	bcc.n	8002a62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e015      	b.n	8002a8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d20b      	bcs.n	8002a84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff9b 	bl	80029b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e004      	b.n	8002a8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002a8e:	f000 fe79 	bl	8003784 <vPortExitCritical>

	return xReturn;
 8002a92:	69fb      	ldr	r3, [r7, #28]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000d44 	.word	0x20000d44
 8002aa0:	20000d58 	.word	0x20000d58

08002aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <vTaskMissedYield+0x14>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	20000d54 	.word	0x20000d54

08002abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ac4:	f000 f852 	bl	8002b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <prvIdleTask+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d9f9      	bls.n	8002ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <prvIdleTask+0x2c>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ae0:	e7f0      	b.n	8002ac4 <prvIdleTask+0x8>
 8002ae2:	bf00      	nop
 8002ae4:	20000870 	.word	0x20000870
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e00c      	b.n	8002b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <prvInitialiseTaskLists+0x60>)
 8002b04:	4413      	add	r3, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fd1e 	bl	8001548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b37      	cmp	r3, #55	; 0x37
 8002b16:	d9ef      	bls.n	8002af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <prvInitialiseTaskLists+0x64>)
 8002b1a:	f7fe fd15 	bl	8001548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <prvInitialiseTaskLists+0x68>)
 8002b20:	f7fe fd12 	bl	8001548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <prvInitialiseTaskLists+0x6c>)
 8002b26:	f7fe fd0f 	bl	8001548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b2a:	480c      	ldr	r0, [pc, #48]	; (8002b5c <prvInitialiseTaskLists+0x70>)
 8002b2c:	f7fe fd0c 	bl	8001548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <prvInitialiseTaskLists+0x74>)
 8002b32:	f7fe fd09 	bl	8001548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <prvInitialiseTaskLists+0x78>)
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <prvInitialiseTaskLists+0x64>)
 8002b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <prvInitialiseTaskLists+0x7c>)
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <prvInitialiseTaskLists+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000870 	.word	0x20000870
 8002b50:	20000cd0 	.word	0x20000cd0
 8002b54:	20000ce4 	.word	0x20000ce4
 8002b58:	20000d00 	.word	0x20000d00
 8002b5c:	20000d14 	.word	0x20000d14
 8002b60:	20000d2c 	.word	0x20000d2c
 8002b64:	20000cf8 	.word	0x20000cf8
 8002b68:	20000cfc 	.word	0x20000cfc

08002b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b72:	e019      	b.n	8002ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b74:	f000 fdd6 	bl	8003724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <prvCheckTasksWaitingTermination+0x50>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fd69 	bl	800165c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <prvCheckTasksWaitingTermination+0x54>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <prvCheckTasksWaitingTermination+0x54>)
 8002b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b9e:	f000 fdf1 	bl	8003784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f810 	bl	8002bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e1      	bne.n	8002b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000d14 	.word	0x20000d14
 8002bc0:	20000d40 	.word	0x20000d40
 8002bc4:	20000d28 	.word	0x20000d28

08002bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 ff8b 	bl	8003af0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 febd 	bl	8003968 <vPortFree>
				vPortFree( pxTCB );
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 feba 	bl	8003968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bf4:	e018      	b.n	8002c28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d103      	bne.n	8002c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 feb1 	bl	8003968 <vPortFree>
	}
 8002c06:	e00f      	b.n	8002c28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d00a      	beq.n	8002c28 <prvDeleteTCB+0x60>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	60fb      	str	r3, [r7, #12]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <prvDeleteTCB+0x5e>
	}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <prvResetNextTaskUnblockTime+0x38>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <prvResetNextTaskUnblockTime+0x3c>)
 8002c42:	f04f 32ff 	mov.w	r2, #4294967295
 8002c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c48:	e008      	b.n	8002c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <prvResetNextTaskUnblockTime+0x38>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <prvResetNextTaskUnblockTime+0x3c>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	20000cf8 	.word	0x20000cf8
 8002c6c:	20000d60 	.word	0x20000d60

08002c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <xTaskGetSchedulerState+0x34>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	e008      	b.n	8002c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <xTaskGetSchedulerState+0x38>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	e001      	b.n	8002c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c96:	687b      	ldr	r3, [r7, #4]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	20000d4c 	.word	0x20000d4c
 8002ca8:	20000d68 	.word	0x20000d68

08002cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d056      	beq.n	8002d70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <xTaskPriorityDisinherit+0xd0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d00a      	beq.n	8002ce2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60fb      	str	r3, [r7, #12]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60bb      	str	r3, [r7, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d02c      	beq.n	8002d70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d128      	bne.n	8002d70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fc9a 	bl	800165c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xTaskPriorityDisinherit+0xd4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d903      	bls.n	8002d50 <xTaskPriorityDisinherit+0xa4>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <xTaskPriorityDisinherit+0xd4>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <xTaskPriorityDisinherit+0xd8>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fe fc1b 	bl	80015a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002d70:	697b      	ldr	r3, [r7, #20]
	}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000086c 	.word	0x2000086c
 8002d80:	20000d48 	.word	0x20000d48
 8002d84:	20000870 	.word	0x20000870

08002d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fc5c 	bl	800165c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d10a      	bne.n	8002dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4819      	ldr	r0, [pc, #100]	; (8002e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8002dbc:	f7fe fbf1 	bl	80015a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002dc0:	e026      	b.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d209      	bcs.n	8002dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7fe fbff 	bl	80015ea <vListInsert>
}
 8002dec:	e010      	b.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7fe fbf5 	bl	80015ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d202      	bcs.n	8002e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000d44 	.word	0x20000d44
 8002e1c:	2000086c 	.word	0x2000086c
 8002e20:	20000d2c 	.word	0x20000d2c
 8002e24:	20000cfc 	.word	0x20000cfc
 8002e28:	20000cf8 	.word	0x20000cf8
 8002e2c:	20000d60 	.word	0x20000d60

08002e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002e3a:	f000 fb07 	bl	800344c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <xTimerCreateTimerTask+0x80>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d021      	beq.n	8002e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e4e:	1d3a      	adds	r2, r7, #4
 8002e50:	f107 0108 	add.w	r1, r7, #8
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fb5b 	bl	8001514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2302      	movs	r3, #2
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	460a      	mov	r2, r1
 8002e70:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <xTimerCreateTimerTask+0x84>)
 8002e72:	4811      	ldr	r0, [pc, #68]	; (8002eb8 <xTimerCreateTimerTask+0x88>)
 8002e74:	f7ff f908 	bl	8002088 <xTaskCreateStatic>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <xTimerCreateTimerTask+0x8c>)
 8002e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <xTimerCreateTimerTask+0x8c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	613b      	str	r3, [r7, #16]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002ea6:	697b      	ldr	r3, [r7, #20]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000da4 	.word	0x20000da4
 8002eb4:	08003cd4 	.word	0x08003cd4
 8002eb8:	08002ff5 	.word	0x08002ff5
 8002ebc:	20000da8 	.word	0x20000da8

08002ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <xTimerGenericCommand+0x2e>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	623b      	str	r3, [r7, #32]
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <xTimerGenericCommand+0x98>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02a      	beq.n	8002f4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	dc18      	bgt.n	8002f3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f08:	f7ff feb2 	bl	8002c70 <xTaskGetSchedulerState>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d109      	bne.n	8002f26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <xTimerGenericCommand+0x98>)
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	f107 0110 	add.w	r1, r7, #16
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1e:	f7fe fccb 	bl	80018b8 <xQueueGenericSend>
 8002f22:	6278      	str	r0, [r7, #36]	; 0x24
 8002f24:	e012      	b.n	8002f4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <xTimerGenericCommand+0x98>)
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	f107 0110 	add.w	r1, r7, #16
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2200      	movs	r2, #0
 8002f32:	f7fe fcc1 	bl	80018b8 <xQueueGenericSend>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24
 8002f38:	e008      	b.n	8002f4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <xTimerGenericCommand+0x98>)
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f107 0110 	add.w	r1, r7, #16
 8002f42:	2300      	movs	r3, #0
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	f7fe fdb5 	bl	8001ab4 <xQueueGenericSendFromISR>
 8002f4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000da4 	.word	0x20000da4

08002f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <prvProcessExpiredTimer+0x94>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fb71 	bl	800165c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d022      	beq.n	8002fce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	18d1      	adds	r1, r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f000 f8d1 	bl	800313c <prvInsertTimerInActiveList>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01f      	beq.n	8002fe0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff88 	bl	8002ec0 <xTimerGenericCommand>
 8002fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	4798      	blx	r3
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000d9c 	.word	0x20000d9c

08002ff4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f857 	bl	80030b4 <prvGetNextExpireTime>
 8003006:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4619      	mov	r1, r3
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f803 	bl	8003018 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003012:	f000 f8d5 	bl	80031c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003016:	e7f1      	b.n	8002ffc <prvTimerTask+0x8>

08003018 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003022:	f7ff fa1d 	bl	8002460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f866 	bl	80030fc <prvSampleTimeNow>
 8003030:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d130      	bne.n	800309a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <prvProcessTimerOrBlockTask+0x3c>
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	429a      	cmp	r2, r3
 8003044:	d806      	bhi.n	8003054 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003046:	f7ff fa19 	bl	800247c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff85 	bl	8002f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003052:	e024      	b.n	800309e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <prvProcessTimerOrBlockTask+0x90>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <prvProcessTimerOrBlockTask+0x50>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <prvProcessTimerOrBlockTask+0x52>
 8003068:	2300      	movs	r3, #0
 800306a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <prvProcessTimerOrBlockTask+0x94>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	f7fe ffd1 	bl	8002020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800307e:	f7ff f9fd 	bl	800247c <xTaskResumeAll>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <prvProcessTimerOrBlockTask+0x98>)
 800308a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	f3bf 8f6f 	isb	sy
}
 8003098:	e001      	b.n	800309e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800309a:	f7ff f9ef 	bl	800247c <xTaskResumeAll>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000da0 	.word	0x20000da0
 80030ac:	20000da4 	.word	0x20000da4
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <prvGetNextExpireTime+0x44>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <prvGetNextExpireTime+0x16>
 80030c6:	2201      	movs	r2, #1
 80030c8:	e000      	b.n	80030cc <prvGetNextExpireTime+0x18>
 80030ca:	2200      	movs	r2, #0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <prvGetNextExpireTime+0x44>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e001      	b.n	80030e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000d9c 	.word	0x20000d9c

080030fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003104:	f7ff fa58 	bl	80025b8 <xTaskGetTickCount>
 8003108:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <prvSampleTimeNow+0x3c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d205      	bcs.n	8003120 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003114:	f000 f936 	bl	8003384 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e002      	b.n	8003126 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <prvSampleTimeNow+0x3c>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000dac 	.word	0x20000dac

0800313c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d812      	bhi.n	8003188 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d302      	bcc.n	8003176 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e01b      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <prvInsertTimerInActiveList+0x7c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3304      	adds	r3, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7fe fa32 	bl	80015ea <vListInsert>
 8003186:	e012      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d206      	bcs.n	800319e <prvInsertTimerInActiveList+0x62>
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e007      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <prvInsertTimerInActiveList+0x80>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7fe fa1e 	bl	80015ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80031ae:	697b      	ldr	r3, [r7, #20]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000da0 	.word	0x20000da0
 80031bc:	20000d9c 	.word	0x20000d9c

080031c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031c6:	e0ca      	b.n	800335e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da18      	bge.n	8003200 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	3304      	adds	r3, #4
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	61fb      	str	r3, [r7, #28]
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	6850      	ldr	r0, [r2, #4]
 80031f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f2c0 80ab 	blt.w	800335e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fa1f 	bl	800165c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800321e:	463b      	mov	r3, r7
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff6b 	bl	80030fc <prvSampleTimeNow>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b09      	cmp	r3, #9
 800322c:	f200 8096 	bhi.w	800335c <prvProcessReceivedCommands+0x19c>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <prvProcessReceivedCommands+0x78>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003261 	.word	0x08003261
 800323c:	08003261 	.word	0x08003261
 8003240:	08003261 	.word	0x08003261
 8003244:	080032d5 	.word	0x080032d5
 8003248:	080032e9 	.word	0x080032e9
 800324c:	08003333 	.word	0x08003333
 8003250:	08003261 	.word	0x08003261
 8003254:	08003261 	.word	0x08003261
 8003258:	080032d5 	.word	0x080032d5
 800325c:	080032e9 	.word	0x080032e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	18d1      	adds	r1, r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003280:	f7ff ff5c 	bl	800313c <prvInsertTimerInActiveList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d069      	beq.n	800335e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003290:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d05e      	beq.n	800335e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	441a      	add	r2, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b2:	f7ff fe05 	bl	8002ec0 <xTimerGenericCommand>
 80032b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d14f      	bne.n	800335e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	61bb      	str	r3, [r7, #24]
}
 80032d0:	bf00      	nop
 80032d2:	e7fe      	b.n	80032d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80032e6:	e03a      	b.n	800335e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	617b      	str	r3, [r7, #20]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	18d1      	adds	r1, r2, r3
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	f7ff ff06 	bl	800313c <prvInsertTimerInActiveList>
					break;
 8003330:	e015      	b.n	800335e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003342:	f000 fb11 	bl	8003968 <vPortFree>
 8003346:	e00a      	b.n	800335e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800335a:	e000      	b.n	800335e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800335c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <prvProcessReceivedCommands+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1d39      	adds	r1, r7, #4
 8003364:	2200      	movs	r2, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fc40 	bl	8001bec <xQueueReceive>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f af2a 	bne.w	80031c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3730      	adds	r7, #48	; 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000da4 	.word	0x20000da4

08003384 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800338a:	e048      	b.n	800341e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <prvSwitchTimerLists+0xc0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <prvSwitchTimerLists+0xc0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe f959 	bl	800165c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02e      	beq.n	800341e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d90e      	bls.n	80033f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <prvSwitchTimerLists+0xc0>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7fe f8fe 	bl	80015ea <vListInsert>
 80033ee:	e016      	b.n	800341e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033f0:	2300      	movs	r3, #0
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2300      	movs	r3, #0
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	2100      	movs	r1, #0
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff fd60 	bl	8002ec0 <xTimerGenericCommand>
 8003400:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	603b      	str	r3, [r7, #0]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <prvSwitchTimerLists+0xc0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1b1      	bne.n	800338c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <prvSwitchTimerLists+0xc0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <prvSwitchTimerLists+0xc4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <prvSwitchTimerLists+0xc0>)
 8003434:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <prvSwitchTimerLists+0xc4>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000d9c 	.word	0x20000d9c
 8003448:	20000da0 	.word	0x20000da0

0800344c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003452:	f000 f967 	bl	8003724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <prvCheckForValidListAndQueue+0x60>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d120      	bne.n	80034a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800345e:	4814      	ldr	r0, [pc, #80]	; (80034b0 <prvCheckForValidListAndQueue+0x64>)
 8003460:	f7fe f872 	bl	8001548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003464:	4813      	ldr	r0, [pc, #76]	; (80034b4 <prvCheckForValidListAndQueue+0x68>)
 8003466:	f7fe f86f 	bl	8001548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <prvCheckForValidListAndQueue+0x6c>)
 800346c:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <prvCheckForValidListAndQueue+0x64>)
 800346e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <prvCheckForValidListAndQueue+0x70>)
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <prvCheckForValidListAndQueue+0x68>)
 8003474:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <prvCheckForValidListAndQueue+0x74>)
 800347c:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <prvCheckForValidListAndQueue+0x78>)
 800347e:	2110      	movs	r1, #16
 8003480:	200a      	movs	r0, #10
 8003482:	f7fe f97d 	bl	8001780 <xQueueGenericCreateStatic>
 8003486:	4603      	mov	r3, r0
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <prvCheckForValidListAndQueue+0x60>)
 800348a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <prvCheckForValidListAndQueue+0x60>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <prvCheckForValidListAndQueue+0x60>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	490b      	ldr	r1, [pc, #44]	; (80034c8 <prvCheckForValidListAndQueue+0x7c>)
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fd96 	bl	8001fcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034a0:	f000 f970 	bl	8003784 <vPortExitCritical>
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000da4 	.word	0x20000da4
 80034b0:	20000d74 	.word	0x20000d74
 80034b4:	20000d88 	.word	0x20000d88
 80034b8:	20000d9c 	.word	0x20000d9c
 80034bc:	20000da0 	.word	0x20000da0
 80034c0:	20000e50 	.word	0x20000e50
 80034c4:	20000db0 	.word	0x20000db0
 80034c8:	08003cdc 	.word	0x08003cdc

080034cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b04      	subs	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b04      	subs	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b04      	subs	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034fc:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <pxPortInitialiseStack+0x64>)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b14      	subs	r3, #20
 8003506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b04      	subs	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f06f 0202 	mvn.w	r2, #2
 800351a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3b20      	subs	r3, #32
 8003520:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	08003535 	.word	0x08003535

08003534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <prvTaskExitError+0x54>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d00a      	beq.n	800355e <prvTaskExitError+0x2a>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	60fb      	str	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <prvTaskExitError+0x28>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60bb      	str	r3, [r7, #8]
}
 8003570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003572:	bf00      	nop
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0fc      	beq.n	8003574 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000008 	.word	0x20000008
 800358c:	00000000 	.word	0x00000000

08003590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <pxCurrentTCBConst2>)
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	6808      	ldr	r0, [r1, #0]
 8003596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359a:	f380 8809 	msr	PSP, r0
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8811 	msr	BASEPRI, r0
 80035aa:	4770      	bx	lr
 80035ac:	f3af 8000 	nop.w

080035b0 <pxCurrentTCBConst2>:
 80035b0:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop

080035b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <prvPortStartFirstTask+0x24>)
 80035ba:	6800      	ldr	r0, [r0, #0]
 80035bc:	6800      	ldr	r0, [r0, #0]
 80035be:	f380 8808 	msr	MSP, r0
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8814 	msr	CONTROL, r0
 80035ca:	b662      	cpsie	i
 80035cc:	b661      	cpsie	f
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	df00      	svc	0
 80035d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035da:	bf00      	nop
 80035dc:	e000ed08 	.word	0xe000ed08

080035e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <xPortStartScheduler+0x120>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <xPortStartScheduler+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10a      	bne.n	8003606 <xPortStartScheduler+0x26>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003606:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <xPortStartScheduler+0x120>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <xPortStartScheduler+0x128>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10a      	bne.n	8003626 <xPortStartScheduler+0x46>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60fb      	str	r3, [r7, #12]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <xPortStartScheduler+0x12c>)
 8003628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <xPortStartScheduler+0x130>)
 800364c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <xPortStartScheduler+0x134>)
 8003650:	2207      	movs	r2, #7
 8003652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003654:	e009      	b.n	800366a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <xPortStartScheduler+0x134>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	4a2d      	ldr	r2, [pc, #180]	; (8003714 <xPortStartScheduler+0x134>)
 800365e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d0ef      	beq.n	8003656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <xPortStartScheduler+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00a      	beq.n	8003698 <xPortStartScheduler+0xb8>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60bb      	str	r3, [r7, #8]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <xPortStartScheduler+0x134>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <xPortStartScheduler+0x134>)
 80036a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <xPortStartScheduler+0x134>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <xPortStartScheduler+0x134>)
 80036ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <xPortStartScheduler+0x138>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <xPortStartScheduler+0x138>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <xPortStartScheduler+0x138>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <xPortStartScheduler+0x138>)
 80036c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036ce:	f000 f8dd 	bl	800388c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <xPortStartScheduler+0x13c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036d8:	f000 f8fc 	bl	80038d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <xPortStartScheduler+0x140>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <xPortStartScheduler+0x140>)
 80036e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036e8:	f7ff ff66 	bl	80035b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036ec:	f7ff f82e 	bl	800274c <vTaskSwitchContext>
	prvTaskExitError();
 80036f0:	f7ff ff20 	bl	8003534 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00
 8003704:	410fc271 	.word	0x410fc271
 8003708:	410fc270 	.word	0x410fc270
 800370c:	e000e400 	.word	0xe000e400
 8003710:	20000ea0 	.word	0x20000ea0
 8003714:	20000ea4 	.word	0x20000ea4
 8003718:	e000ed20 	.word	0xe000ed20
 800371c:	20000008 	.word	0x20000008
 8003720:	e000ef34 	.word	0xe000ef34

08003724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <vPortEnterCritical+0x58>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <vPortEnterCritical+0x58>)
 8003746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <vPortEnterCritical+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10f      	bne.n	8003770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <vPortEnterCritical+0x5c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <vPortEnterCritical+0x4c>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	603b      	str	r3, [r7, #0]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vPortEnterCritical+0x4a>
	}
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	20000008 	.word	0x20000008
 8003780:	e000ed04 	.word	0xe000ed04

08003784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <vPortExitCritical+0x50>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <vPortExitCritical+0x24>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	607b      	str	r3, [r7, #4]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <vPortExitCritical+0x50>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <vPortExitCritical+0x50>)
 80037b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <vPortExitCritical+0x50>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <vPortExitCritical+0x42>
 80037ba:	2300      	movs	r3, #0
 80037bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f383 8811 	msr	BASEPRI, r3
}
 80037c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000008 	.word	0x20000008
	...

080037e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037e0:	f3ef 8009 	mrs	r0, PSP
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <pxCurrentTCBConst>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f01e 0f10 	tst.w	lr, #16
 80037f0:	bf08      	it	eq
 80037f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fa:	6010      	str	r0, [r2, #0]
 80037fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003804:	f380 8811 	msr	BASEPRI, r0
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f7fe ff9c 	bl	800274c <vTaskSwitchContext>
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f380 8811 	msr	BASEPRI, r0
 800381c:	bc09      	pop	{r0, r3}
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	6808      	ldr	r0, [r1, #0]
 8003822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003826:	f01e 0f10 	tst.w	lr, #16
 800382a:	bf08      	it	eq
 800382c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003830:	f380 8809 	msr	PSP, r0
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	f3af 8000 	nop.w

08003840 <pxCurrentTCBConst>:
 8003840:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop

08003848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003862:	f7fe feb9 	bl	80025d8 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <xPortSysTickHandler+0x40>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f383 8811 	msr	BASEPRI, r3
}
 800387e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <vPortSetupTimerInterrupt+0x38>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <vPortSetupTimerInterrupt+0x3c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <vPortSetupTimerInterrupt+0x40>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <vPortSetupTimerInterrupt+0x44>)
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010
 80038c4:	e000e018 	.word	0xe000e018
 80038c8:	20000000 	.word	0x20000000
 80038cc:	10624dd3 	.word	0x10624dd3
 80038d0:	e000e014 	.word	0xe000e014

080038d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038e4 <vPortEnableVFP+0x10>
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038de:	6001      	str	r1, [r0, #0]
 80038e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038e2:	bf00      	nop
 80038e4:	e000ed88 	.word	0xe000ed88

080038e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80038ee:	f3ef 8305 	mrs	r3, IPSR
 80038f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	d914      	bls.n	8003924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <vPortValidateInterruptPriority+0x70>)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <vPortValidateInterruptPriority+0x74>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	7afa      	ldrb	r2, [r7, #11]
 800390a:	429a      	cmp	r2, r3
 800390c:	d20a      	bcs.n	8003924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	607b      	str	r3, [r7, #4]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <vPortValidateInterruptPriority+0x78>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <vPortValidateInterruptPriority+0x7c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d90a      	bls.n	800394a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	603b      	str	r3, [r7, #0]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <vPortValidateInterruptPriority+0x60>
	}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e3f0 	.word	0xe000e3f0
 800395c:	20000ea0 	.word	0x20000ea0
 8003960:	e000ed0c 	.word	0xe000ed0c
 8003964:	20000ea4 	.word	0x20000ea4

08003968 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04d      	beq.n	8003a16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800397a:	2308      	movs	r3, #8
 800397c:	425b      	negs	r3, r3
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4413      	add	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <vPortFree+0xb8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <vPortFree+0x44>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	60fb      	str	r3, [r7, #12]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <vPortFree+0x62>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60bb      	str	r3, [r7, #8]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <vPortFree+0xb8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01e      	beq.n	8003a16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11a      	bne.n	8003a16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <vPortFree+0xb8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	401a      	ands	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039f0:	f7fe fd36 	bl	8002460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <vPortFree+0xbc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <vPortFree+0xbc>)
 8003a00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a02:	6938      	ldr	r0, [r7, #16]
 8003a04:	f000 f812 	bl	8003a2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <vPortFree+0xc0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <vPortFree+0xc0>)
 8003a10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a12:	f7fe fd33 	bl	800247c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000ebc 	.word	0x20000ebc
 8003a24:	20000eb4 	.word	0x20000eb4
 8003a28:	20000eb8 	.word	0x20000eb8

08003a2c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <prvInsertBlockIntoFreeList+0xac>)
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e002      	b.n	8003a40 <prvInsertBlockIntoFreeList+0x14>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d8f7      	bhi.n	8003a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4413      	add	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d108      	bne.n	8003a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	441a      	add	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d118      	bne.n	8003ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <prvInsertBlockIntoFreeList+0xb0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d00d      	beq.n	8003aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e008      	b.n	8003abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <prvInsertBlockIntoFreeList+0xb0>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d002      	beq.n	8003aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000ea8 	.word	0x20000ea8
 8003adc:	20000eb0 	.word	0x20000eb0

08003ae0 <memset>:
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	f803 1b01 	strb.w	r1, [r3], #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <_reclaim_reent>:
 8003af0:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <_reclaim_reent+0xa8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4283      	cmp	r3, r0
 8003af6:	b570      	push	{r4, r5, r6, lr}
 8003af8:	4604      	mov	r4, r0
 8003afa:	d04b      	beq.n	8003b94 <_reclaim_reent+0xa4>
 8003afc:	69c3      	ldr	r3, [r0, #28]
 8003afe:	b143      	cbz	r3, 8003b12 <_reclaim_reent+0x22>
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d144      	bne.n	8003b90 <_reclaim_reent+0xa0>
 8003b06:	69e3      	ldr	r3, [r4, #28]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	b111      	cbz	r1, 8003b12 <_reclaim_reent+0x22>
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 f879 	bl	8003c04 <_free_r>
 8003b12:	6961      	ldr	r1, [r4, #20]
 8003b14:	b111      	cbz	r1, 8003b1c <_reclaim_reent+0x2c>
 8003b16:	4620      	mov	r0, r4
 8003b18:	f000 f874 	bl	8003c04 <_free_r>
 8003b1c:	69e1      	ldr	r1, [r4, #28]
 8003b1e:	b111      	cbz	r1, 8003b26 <_reclaim_reent+0x36>
 8003b20:	4620      	mov	r0, r4
 8003b22:	f000 f86f 	bl	8003c04 <_free_r>
 8003b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b28:	b111      	cbz	r1, 8003b30 <_reclaim_reent+0x40>
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f86a 	bl	8003c04 <_free_r>
 8003b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b32:	b111      	cbz	r1, 8003b3a <_reclaim_reent+0x4a>
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 f865 	bl	8003c04 <_free_r>
 8003b3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b3c:	b111      	cbz	r1, 8003b44 <_reclaim_reent+0x54>
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 f860 	bl	8003c04 <_free_r>
 8003b44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b46:	b111      	cbz	r1, 8003b4e <_reclaim_reent+0x5e>
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f85b 	bl	8003c04 <_free_r>
 8003b4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b50:	b111      	cbz	r1, 8003b58 <_reclaim_reent+0x68>
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f856 	bl	8003c04 <_free_r>
 8003b58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b5a:	b111      	cbz	r1, 8003b62 <_reclaim_reent+0x72>
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 f851 	bl	8003c04 <_free_r>
 8003b62:	6a23      	ldr	r3, [r4, #32]
 8003b64:	b1b3      	cbz	r3, 8003b94 <_reclaim_reent+0xa4>
 8003b66:	4620      	mov	r0, r4
 8003b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b6c:	4718      	bx	r3
 8003b6e:	5949      	ldr	r1, [r1, r5]
 8003b70:	b941      	cbnz	r1, 8003b84 <_reclaim_reent+0x94>
 8003b72:	3504      	adds	r5, #4
 8003b74:	69e3      	ldr	r3, [r4, #28]
 8003b76:	2d80      	cmp	r5, #128	; 0x80
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	d1f8      	bne.n	8003b6e <_reclaim_reent+0x7e>
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 f841 	bl	8003c04 <_free_r>
 8003b82:	e7c0      	b.n	8003b06 <_reclaim_reent+0x16>
 8003b84:	680e      	ldr	r6, [r1, #0]
 8003b86:	4620      	mov	r0, r4
 8003b88:	f000 f83c 	bl	8003c04 <_free_r>
 8003b8c:	4631      	mov	r1, r6
 8003b8e:	e7ef      	b.n	8003b70 <_reclaim_reent+0x80>
 8003b90:	2500      	movs	r5, #0
 8003b92:	e7ef      	b.n	8003b74 <_reclaim_reent+0x84>
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	bf00      	nop
 8003b98:	20000058 	.word	0x20000058

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	; (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	; (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f000 f880 	bl	8003cb4 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08003cec 	.word	0x08003cec
 8003bd8:	08003cec 	.word	0x08003cec
 8003bdc:	08003cec 	.word	0x08003cec
 8003be0:	08003cf0 	.word	0x08003cf0

08003be4 <__retarget_lock_acquire_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_release_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <memcpy>:
 8003be8:	440a      	add	r2, r1
 8003bea:	4291      	cmp	r1, r2
 8003bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bf0:	d100      	bne.n	8003bf4 <memcpy+0xc>
 8003bf2:	4770      	bx	lr
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bfe:	4291      	cmp	r1, r2
 8003c00:	d1f9      	bne.n	8003bf6 <memcpy+0xe>
 8003c02:	bd10      	pop	{r4, pc}

08003c04 <_free_r>:
 8003c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c06:	2900      	cmp	r1, #0
 8003c08:	d044      	beq.n	8003c94 <_free_r+0x90>
 8003c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0e:	9001      	str	r0, [sp, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f1a1 0404 	sub.w	r4, r1, #4
 8003c16:	bfb8      	it	lt
 8003c18:	18e4      	addlt	r4, r4, r3
 8003c1a:	f000 f83f 	bl	8003c9c <__malloc_lock>
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <_free_r+0x94>)
 8003c20:	9801      	ldr	r0, [sp, #4]
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	b933      	cbnz	r3, 8003c34 <_free_r+0x30>
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	6014      	str	r4, [r2, #0]
 8003c2a:	b003      	add	sp, #12
 8003c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c30:	f000 b83a 	b.w	8003ca8 <__malloc_unlock>
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d908      	bls.n	8003c4a <_free_r+0x46>
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	1961      	adds	r1, r4, r5
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf01      	itttt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	1949      	addeq	r1, r1, r5
 8003c46:	6021      	streq	r1, [r4, #0]
 8003c48:	e7ed      	b.n	8003c26 <_free_r+0x22>
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b10b      	cbz	r3, 8003c54 <_free_r+0x50>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d9fa      	bls.n	8003c4a <_free_r+0x46>
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	1855      	adds	r5, r2, r1
 8003c58:	42a5      	cmp	r5, r4
 8003c5a:	d10b      	bne.n	8003c74 <_free_r+0x70>
 8003c5c:	6824      	ldr	r4, [r4, #0]
 8003c5e:	4421      	add	r1, r4
 8003c60:	1854      	adds	r4, r2, r1
 8003c62:	42a3      	cmp	r3, r4
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	d1e0      	bne.n	8003c2a <_free_r+0x26>
 8003c68:	681c      	ldr	r4, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	6053      	str	r3, [r2, #4]
 8003c6e:	440c      	add	r4, r1
 8003c70:	6014      	str	r4, [r2, #0]
 8003c72:	e7da      	b.n	8003c2a <_free_r+0x26>
 8003c74:	d902      	bls.n	8003c7c <_free_r+0x78>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6003      	str	r3, [r0, #0]
 8003c7a:	e7d6      	b.n	8003c2a <_free_r+0x26>
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf04      	itt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	bf04      	itt	eq
 8003c8c:	1949      	addeq	r1, r1, r5
 8003c8e:	6021      	streq	r1, [r4, #0]
 8003c90:	6054      	str	r4, [r2, #4]
 8003c92:	e7ca      	b.n	8003c2a <_free_r+0x26>
 8003c94:	b003      	add	sp, #12
 8003c96:	bd30      	pop	{r4, r5, pc}
 8003c98:	20000ffc 	.word	0x20000ffc

08003c9c <__malloc_lock>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__malloc_lock+0x8>)
 8003c9e:	f7ff bfa1 	b.w	8003be4 <__retarget_lock_acquire_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20000ff8 	.word	0x20000ff8

08003ca8 <__malloc_unlock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__malloc_unlock+0x8>)
 8003caa:	f7ff bf9c 	b.w	8003be6 <__retarget_lock_release_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20000ff8 	.word	0x20000ff8

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr
